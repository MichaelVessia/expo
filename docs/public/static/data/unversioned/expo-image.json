{"name":"expo-image","kind":1,"originalName":"","children":[{"name":"Image","kind":128,"kindString":"Class","children":[{"name":"constructor","kind":512,"kindString":"Constructor","flags":{"isExternal":true},"signatures":[{"name":"new Image","kind":16384,"kindString":"Constructor signature","flags":{"isExternal":true},"parameters":[{"name":"props","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"reference","name":"ImageProps"},{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}]}}],"type":{"type":"reference","name":"Image"},"inheritedFrom":{"type":"reference","name":"React.PureComponent<ImageProps>.constructor"}},{"name":"new Image","kind":16384,"kindString":"Constructor signature","flags":{"isExternal":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[]},{"tag":"@see","content":[{"kind":"text","text":"https://reactjs.org/docs/legacy-context.html"}]}]},"parameters":[{"name":"props","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"ImageProps"}},{"name":"context","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"reference","name":"Image"},"inheritedFrom":{"type":"reference","name":"React.PureComponent<ImageProps>.constructor"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent<ImageProps>.constructor"}},{"name":"context","kind":1024,"kindString":"Property","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"If using the new style context, re-declare this in your class to be the\n"},{"kind":"code","text":"`React.ContextType`"},{"kind":"text","text":" of your "},{"kind":"code","text":"`static contextType`"},{"kind":"text","text":".\nShould be used with type annotation or static contextType.\n\n"},{"kind":"code","text":"```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```"}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"https://reactjs.org/docs/context.html"}]}]},"type":{"type":"intrinsic","name":"unknown"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.context"}},{"name":"props","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isReadonly":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.props"}},{"name":"refs","kind":1024,"kindString":"Property","flags":{"isExternal":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs"}]}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","indexSignature":{"name":"__index","kind":8192,"kindString":"Index signature","parameters":[{"name":"key","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"ReactInstance","qualifiedName":"React.ReactInstance","package":"@types/react"}}}},"inheritedFrom":{"type":"reference","name":"React.PureComponent.refs"}},{"name":"state","kind":1024,"kindString":"Property","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal"}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.state"}},{"name":"contextType","kind":1024,"kindString":"Property","flags":{"isStatic":true,"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If set, "},{"kind":"code","text":"`this.context`"},{"kind":"text","text":" will be set at runtime to the current value of the given Context.\n\nUsage:\n\n"},{"kind":"code","text":"```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```"}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"https://reactjs.org/docs/context.html#classcontexttype"}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Context","qualifiedName":"React.Context","package":"@types/react"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.contextType"}},{"name":"UNSAFE_componentWillMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"UNSAFE_componentWillMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before mounting occurs, and before "},{"kind":"code","text":"`Component#render`"},{"kind":"text","text":".\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use componentDidMount or the constructor instead"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.UNSAFE_componentWillMount"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.UNSAFE_componentWillMount"}},{"name":"UNSAFE_componentWillReceiveProps","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"UNSAFE_componentWillReceiveProps","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling "},{"kind":"code","text":"`Component#setState`"},{"kind":"text","text":" generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use static getDerivedStateFromProps instead"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.UNSAFE_componentWillReceiveProps"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.UNSAFE_componentWillReceiveProps"}},{"name":"UNSAFE_componentWillUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"UNSAFE_componentWillUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call "},{"kind":"code","text":"`Component#setState`"},{"kind":"text","text":" here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use getSnapshotBeforeUpdate instead"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.UNSAFE_componentWillUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.UNSAFE_componentWillUpdate"}},{"name":"componentDidCatch","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentDidCatch","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."}]},"parameters":[{"name":"error","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"Error","qualifiedName":"Error","package":"typescript"}},{"name":"errorInfo","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"ErrorInfo","qualifiedName":"React.ErrorInfo","package":"@types/react"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentDidCatch"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentDidCatch"}},{"name":"componentDidMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentDidMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately after a component is mounted. Setting state here will trigger re-rendering."}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentDidMount"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentDidMount"}},{"name":"componentDidUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentDidUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null."}]},"parameters":[{"name":"prevProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"snapshot","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentDidUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentDidUpdate"}},{"name":"componentWillMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before mounting occurs, and before "},{"kind":"code","text":"`Component#render`"},{"kind":"text","text":".\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use componentDidMount or the constructor instead; will stop working in React 17"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillMount"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillMount"}},{"name":"componentWillReceiveProps","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillReceiveProps","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling "},{"kind":"code","text":"`Component#setState`"},{"kind":"text","text":" generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use static getDerivedStateFromProps instead; will stop working in React 17"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillReceiveProps"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillReceiveProps"}},{"name":"componentWillUnmount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillUnmount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in "},{"kind":"code","text":"`componentDidMount`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillUnmount"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillUnmount"}},{"name":"componentWillUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call "},{"kind":"code","text":"`Component#setState`"},{"kind":"text","text":" here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillUpdate"}},{"name":"forceUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true},"signatures":[{"name":"forceUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"callback","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.forceUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.forceUpdate"}},{"name":"getSnapshotBeforeUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"getSnapshotBeforeUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Runs before React applies the result of "},{"kind":"code","text":"`render`"},{"kind":"text","text":" to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before "},{"kind":"code","text":"`render`"},{"kind":"text","text":" causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running."}]},"parameters":[{"name":"prevProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}}],"type":{"type":"intrinsic","name":"any"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.getSnapshotBeforeUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.getSnapshotBeforeUpdate"}},{"name":"render","kind":2048,"kindString":"Method","signatures":[{"name":"render","kind":4096,"kindString":"Call signature","type":{"type":"reference","name":"Element","qualifiedName":"global.JSX.Element","package":"@types/react"},"overwrites":{"type":"reference","name":"React.PureComponent.render"}}],"overwrites":{"type":"reference","name":"React.PureComponent.render"}},{"name":"setState","kind":2048,"kindString":"Method","flags":{"isExternal":true},"signatures":[{"name":"setState","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"typeParameter":[{"name":"K","kind":131072,"kindString":"Type parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"never"}}],"parameters":[{"name":"state","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"props","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","name":"K","qualifiedName":"K","package":"@types/react"}],"name":"Pick","qualifiedName":"Pick","package":"typescript"}]}}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","name":"K","qualifiedName":"K","package":"@types/react"}],"name":"Pick","qualifiedName":"Pick","package":"typescript"}]}},{"name":"callback","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.setState"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.setState"}},{"name":"shouldComponentUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"shouldComponentUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called to determine whether the change in props and state should trigger a re-render.\n\n"},{"kind":"code","text":"`Component`"},{"kind":"text","text":" always returns true.\n"},{"kind":"code","text":"`PureComponent`"},{"kind":"text","text":" implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, "},{"kind":"code","text":"`Component#render`"},{"kind":"text","text":", "},{"kind":"code","text":"`componentWillUpdate`"},{"kind":"text","text":"\nand "},{"kind":"code","text":"`componentDidUpdate`"},{"kind":"text","text":" will not be called."}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.shouldComponentUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.shouldComponentUpdate"}},{"name":"clearDiskCache","kind":2048,"kindString":"Method","flags":{"isStatic":true},"signatures":[{"name":"clearDiskCache","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Asynchronously clears all images from the disk cache."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise resolving to "},{"kind":"code","text":"`true`"},{"kind":"text","text":" when the operation succeeds.\nIt may resolve to "},{"kind":"code","text":"`false`"},{"kind":"text","text":" on Android when the activity is no longer available."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"clearMemoryCache","kind":2048,"kindString":"Method","flags":{"isStatic":true},"signatures":[{"name":"clearMemoryCache","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Asynchronously clears all images stored in memory."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise resolving to "},{"kind":"code","text":"`true`"},{"kind":"text","text":" when the operation succeeds.\nIt may resolve to "},{"kind":"code","text":"`false`"},{"kind":"text","text":" on Android when the activity is no longer available."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"prefetch","kind":2048,"kindString":"Method","flags":{"isStatic":true},"signatures":[{"name":"prefetch","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Preloads images at the given urls that can be later used in the image view.\nPreloaded images are always cached on the disk, so make sure to use\n"},{"kind":"code","text":"`disk`"},{"kind":"text","text":" (default) or "},{"kind":"code","text":"`memory-disk`"},{"kind":"text","text":" cache policy."}]},"parameters":[{"name":"urls","kind":32768,"kindString":"Parameter","type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"type":{"type":"intrinsic","name":"void"}}]}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"PureComponent","qualifiedName":"React.PureComponent","package":"@types/react"}]},{"name":"ImageContentPosition","kind":4194304,"kindString":"Type alias","comment":{"summary":[{"kind":"text","text":"Specifies the position of the image inside its container. One value controls the x-axis and the second value controls the y-axis.\n\nAdditionally, it supports stringified shorthand form that specifies the edges to which to align the image content:\\\n"},{"kind":"code","text":"`'center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'top'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'right'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'bottom'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'left'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'top center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'top right'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'top left'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'right center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'right top'`"},{"kind":"text","text":",\n"},{"kind":"code","text":"`'right bottom'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'bottom center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'bottom right'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'bottom left'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'left center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'left top'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'left bottom'`"},{"kind":"text","text":".\\\nIf only one keyword is provided, then the other dimension is set to "},{"kind":"code","text":"`'center'`"},{"kind":"text","text":" ("},{"kind":"code","text":"`'50%'`"},{"kind":"text","text":"), so the image is placed in the middle of the specified edge.\\\nAs an example, "},{"kind":"code","text":"`'top right'`"},{"kind":"text","text":" is the same as "},{"kind":"code","text":"`{ top: 0, right: 0 }`"},{"kind":"text","text":" and "},{"kind":"code","text":"`'bottom'`"},{"kind":"text","text":" is the same as "},{"kind":"code","text":"`{ bottom: 0, left: '50%' }`"},{"kind":"text","text":"."}]},"type":{"type":"union","types":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"right","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}},{"name":"top","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}}]}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"left","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}},{"name":"top","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}}]}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"bottom","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}},{"name":"right","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}}]}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"bottom","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}},{"name":"left","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}}]}},{"type":"reference","name":"ImageContentPositionString"}]}},{"name":"ImageContentPositionValue","kind":4194304,"kindString":"Type alias","comment":{"summary":[{"kind":"text","text":"A value that represents the relative position of a single axis.\n\nIf "},{"kind":"code","text":"`number`"},{"kind":"text","text":", it is a distance in points (logical pixels) from the respective edge.\\\nIf "},{"kind":"code","text":"`string`"},{"kind":"text","text":", it must be a percentage value where "},{"kind":"code","text":"`'100%'`"},{"kind":"text","text":" is the difference in size between the container and the image along the respective axis,\nor "},{"kind":"code","text":"`'center'`"},{"kind":"text","text":" which is an alias for "},{"kind":"code","text":"`'50%'`"},{"kind":"text","text":" that is the default value. You can read more regarding percentages on the MDN docs for\n["},{"kind":"code","text":"`background-position`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position#regarding_percentages) that describes this concept well."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"},{"type":"template-literal","head":"","tail":[[{"type":"intrinsic","name":"number"},"%"]]},{"type":"template-literal","head":"","tail":[[{"type":"intrinsic","name":"number"},""]]},{"type":"literal","value":"center"}]}},{"name":"ImageErrorEventData","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"error","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"string"}}]}}},{"name":"ImageLoadEventData","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"cacheType","kind":1024,"kindString":"Property","type":{"type":"union","types":[{"type":"literal","value":"none"},{"type":"literal","value":"disk"},{"type":"literal","value":"memory"}]}},{"name":"source","kind":1024,"kindString":"Property","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"height","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}},{"name":"mediaType","kind":1024,"kindString":"Property","type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"url","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"string"}},{"name":"width","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}}]}}}]}}},{"name":"ImageProgressEventData","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"loaded","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}},{"name":"total","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}}]}}},{"name":"ImageProps","kind":4194304,"kindString":"Type alias","comment":{"summary":[{"kind":"text","text":"Some props are from React Native Image that Expo Image supports (more or less) for easier migration,\nbut all of them are deprecated and might be removed in the future."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"blurRadius","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The radius of the blur in points, "},{"kind":"code","text":"`0`"},{"kind":"text","text":" means no blur effect.\nThis effect is not applied to placeholders."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"cachePolicy","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Determines whether to cache the image and where: on the disk, in the memory or both.\n\n- "},{"kind":"code","text":"`'none'`"},{"kind":"text","text":" - Image is not cached at all.\n\n- "},{"kind":"code","text":"`'disk'`"},{"kind":"text","text":" - Image is queried from the disk cache if exists, otherwise it's downloaded and then stored on the disk.\n\n- "},{"kind":"code","text":"`'memory'`"},{"kind":"text","text":" - Image is cached in memory. Might be useful when you render a high-resolution picture many times.\nMemory cache may be purged very quickly to prevent high memory usage and the risk of out of memory exceptions.\n\n- "},{"kind":"code","text":"`'memory-disk'`"},{"kind":"text","text":" - Image is cached in memory, but with a fallback to the disk cache."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'disk'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"none"},{"type":"literal","value":"disk"},{"type":"literal","value":"memory"},{"type":"literal","value":"memory-disk"},{"type":"literal","value":null}]}},{"name":"contentFit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Determines how the image should be resized to fit its container. This property tells the image to fill the container\nin a variety of ways; such as \"preserve that aspect ratio\" or \"stretch up and take up as much space as possible\".\nIt mirrors the CSS ["},{"kind":"code","text":"`object-fit`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) property.\n\n- "},{"kind":"code","text":"`'cover'`"},{"kind":"text","text":" - The image is sized to maintain its aspect ratio while filling the container box.\nIf the image's aspect ratio does not match the aspect ratio of its box, then the object will be clipped to fit.\n\n- "},{"kind":"code","text":"`'contain'`"},{"kind":"text","text":" - The image is scaled down or up to maintain its aspect ratio while fitting within the container box.\n\n- "},{"kind":"code","text":"`'fill'`"},{"kind":"text","text":" - The image is sized to entirely fill the container box. If necessary, the image will be stretched or squished to fit.\n\n- "},{"kind":"code","text":"`'none'`"},{"kind":"text","text":" - The image is not resized and is centered by default.\nWhen specified, the exact position can be controlled with ["},{"kind":"code","text":"`contentPosition`"},{"kind":"text","text":"](#contentposition) prop.\n\n- "},{"kind":"code","text":"`'scale-down'`"},{"kind":"text","text":" - The image is sized as if "},{"kind":"code","text":"`none`"},{"kind":"text","text":" or "},{"kind":"code","text":"`contain`"},{"kind":"text","text":" were specified, whichever would result in a smaller concrete image size."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'cover'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"cover"},{"type":"literal","value":"contain"},{"type":"literal","value":"fill"},{"type":"literal","value":"none"},{"type":"literal","value":"scale-down"}]}},{"name":"contentPosition","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"It is used together with ["},{"kind":"code","text":"`contentFit`"},{"kind":"text","text":"](#contentfit) to specify how the image should be positioned with x/y coordinates inside its own container.\nAn equivalent of the CSS ["},{"kind":"code","text":"`object-position`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) property."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'center'"}]}]},"type":{"type":"reference","name":"ImageContentPosition"}},{"name":"defaultSource","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`defaultSource`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#defaultsource).\nUse ["},{"kind":"code","text":"`placeholder`"},{"kind":"text","text":"](#placeholder) prop instead."}]}]},"type":{"type":"union","types":[{"type":"reference","name":"ImageSource"},{"type":"literal","value":null}]}},{"name":"fadeDuration","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`fadeDuration`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#fadeduration-android).\nInstead use ["},{"kind":"code","text":"`transition`"},{"kind":"text","text":"](#transition) with the provided duration."}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"loadingIndicatorSource","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`loadingIndicatorSource`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#loadingindicatorsource).\nUse ["},{"kind":"code","text":"`placeholder`"},{"kind":"text","text":"](#placeholder) prop instead."}]}]},"type":{"type":"union","types":[{"type":"reference","name":"ImageSource"},{"type":"literal","value":null}]}},{"name":"onError","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Called on an image fetching error."}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"ImageErrorEventData"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onLoad","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Called when the image load completes successfully."}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"ImageLoadEventData"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onLoadEnd","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Called when the image load either succeeds or fails."}]},"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onLoadStart","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Called when the image starts to load."}]},"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onProgress","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Called when the image is loading. Can be called multiple times before the image has finished loading.\nThe event object provides details on how many bytes were loaded so far and what's the expected total size."}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"ImageProgressEventData"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An image to display while loading the proper image and no image has been displayed yet or the source is unset."}]},"type":{"type":"union","types":[{"type":"reference","name":"ImageSource"},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"array","elementType":{"type":"reference","name":"ImageSource"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"literal","value":null}]}},{"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Priorities for completing loads. If more than one load is queued at a time,\nthe load with the higher priority will be started first.\nPriorities are considered best effort, there are no guarantees about the order in which loads will start or finish."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'normal'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"low"},{"type":"literal","value":"normal"},{"type":"literal","value":"high"},{"type":"literal","value":null}]}},{"name":"resizeMode","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`resizeMode`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#resizemode).\nNote that "},{"kind":"code","text":"`\"repeat\"`"},{"kind":"text","text":" option is not supported at all.\nUse the more powerful ["},{"kind":"code","text":"`contentFit`"},{"kind":"text","text":"](#contentfit) and ["},{"kind":"code","text":"`contentPosition`"},{"kind":"text","text":"](#contentposition) props instead."}]}]},"type":{"type":"union","types":[{"type":"literal","value":"cover"},{"type":"literal","value":"contain"},{"type":"literal","value":"stretch"},{"type":"literal","value":"repeat"},{"type":"literal","value":"center"}]}},{"name":"responsivePolicy","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Determines whether to choose image source based on container size only on mount or on every resize.\nUse "},{"kind":"code","text":"`initial`"},{"kind":"text","text":" to improve performance."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"\"live\""}]},{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"live"},{"type":"literal","value":"initial"}]}},{"name":"source","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The image source, either a remote URL, a local file resource or a number that is the result of the "},{"kind":"code","text":"`require()`"},{"kind":"text","text":" function.\nWhen provided as an array of sources, the source that fits best into the container size and is closest to the screen scale\nwill be chosen. In this case it is important to provide "},{"kind":"code","text":"`width`"},{"kind":"text","text":", "},{"kind":"code","text":"`height`"},{"kind":"text","text":" and "},{"kind":"code","text":"`scale`"},{"kind":"text","text":" properties."}]},"type":{"type":"union","types":[{"type":"reference","name":"ImageSource"},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"array","elementType":{"type":"reference","name":"ImageSource"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"literal","value":null}]}},{"name":"tintColor","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A color used to tint template images (a bitmap image where only the opacity matters).\nThe color is applied to every non-transparent pixel, causing the image’s shape to adopt that color.\nThis effect is not applied to placeholders."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"null"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"transition","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Describes how the image view should transition the contents when switching the image source.\\\nIf provided as a number, it is the duration in milliseconds of the "},{"kind":"code","text":"`'cross-dissolve'`"},{"kind":"text","text":" effect."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"union","types":[{"type":"reference","name":"ImageTransition"},{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}}]}}},{"name":"ImageSource","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"blurhash","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The blurhash string to use to generate the image. You can read more about the blurhash\non ["},{"kind":"code","text":"`woltapp/blurhash`"},{"kind":"text","text":"](https://github.com/woltapp/blurhash) repo. Ignored when "},{"kind":"code","text":"`uri`"},{"kind":"text","text":" is provided.\nWhen using the blurhash, you should also provide "},{"kind":"code","text":"`width`"},{"kind":"text","text":" and "},{"kind":"code","text":"`height`"},{"kind":"text","text":" (higher values reduce performance),\notherwise their default value is "},{"kind":"code","text":"`16`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"headers","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An object representing the HTTP headers to send along with the request for a remote image."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record","qualifiedName":"Record","package":"typescript"}},{"name":"height","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Can be specified if known at build time, in which case the value\nwill be used to set the default "},{"kind":"code","text":"`<Image/>`"},{"kind":"text","text":" component dimension"}]},"type":{"type":"intrinsic","name":"number"}},{"name":"uri","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A string representing the resource identifier for the image,\nwhich could be an http address, a local file path, or the name of a static image resource."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"width","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Can be specified if known at build time, in which case the value\nwill be used to set the default "},{"kind":"code","text":"`<Image/>`"},{"kind":"text","text":" component dimension"}]},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"ImageTransition","kind":4194304,"kindString":"Type alias","comment":{"summary":[{"kind":"text","text":"An object that describes the smooth transition when switching the image source."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"duration","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The duration of the transition in milliseconds."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"effect","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An animation effect used for transition."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'cross-dissolve'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"cross-dissolve"},{"type":"literal","value":"flip-from-top"},{"type":"literal","value":"flip-from-right"},{"type":"literal","value":"flip-from-bottom"},{"type":"literal","value":"flip-from-left"},{"type":"literal","value":"curl-up"},{"type":"literal","value":"curl-down"},{"type":"literal","value":null}]}},{"name":"timing","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Specifies the speed curve of the transition effect and how intermediate values are calculated."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'ease-in-out'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"ease-in-out"},{"type":"literal","value":"ease-in"},{"type":"literal","value":"ease-out"},{"type":"literal","value":"linear"}]}}]}}}]}